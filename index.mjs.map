{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isFunction from '@stdlib/assert-is-function';\nimport parseJSON from '@stdlib/utils-parse-json';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isWhitespace from '@stdlib/assert-is-whitespace';\nimport reEOL from '@stdlib/regexp-eol';\n\n\n// MAIN //\n\n/**\n* Parses a string as newline-delimited JSON (NDJSON).\n*\n* @param {string} str - input string\n* @param {Function} [reviver] - transformation function applied to each line\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} reviver must be a function\n* @returns {Array|Error} array of parsed values or an error\n*\n* @example\n* var out = parseNDJSON( '{\"name\":\"John\"}\\n{\"name\":\"Doe\"}' );\n* // returns [ { 'name': 'John' }, { 'name': 'Doe' } ]\n*/\nfunction parseNDJSON( str, reviver ) {\n\tvar parsed;\n\tvar RE_EOL;\n\tvar lines;\n\tvar out;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'null3F', str ) );\n\t}\n\tif ( arguments.length > 1 && !isFunction( reviver ) ) {\n\t\tthrow new TypeError( format( 'nullBk', str ) );\n\t}\n\tif ( isWhitespace( str ) || str === '' ) {\n\t\treturn [];\n\t}\n\n\tRE_EOL = reEOL();\n\n\tlines = str.split( RE_EOL );\n\n\t// Remove trailing newline:\n\tif ( lines[ lines.length - 1 ].length === 0 ) {\n\t\tlines.pop();\n\t}\n\n\tout = [];\n\n\tfor ( i = 0; i < lines.length; i++ ) {\n\t\tif ( reviver ) {\n\t\t\tparsed = parseJSON( lines[ i ], reviver );\n\t\t} else {\n\t\t\tparsed = parseJSON( lines[ i ] );\n\t\t}\n\t\tif ( parsed instanceof Error ) {\n\t\t\treturn parsed;\n\t\t}\n\n\t\tout.push( parsed );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default parseNDJSON;\n"],"names":["parseNDJSON","str","reviver","parsed","RE_EOL","lines","out","i","isString","TypeError","format","arguments","length","isFunction","isWhitespace","reEOL","split","pop","parseJSON","Error","push"],"mappings":";;ujBA6CA,SAASA,EAAaC,EAAKC,GAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUP,GACf,MAAM,IAAIQ,UAAWC,EAAQ,SAAUT,IAExC,GAAKU,UAAUC,OAAS,IAAMC,EAAYX,GACzC,MAAM,IAAIO,UAAWC,EAAQ,SAAUT,IAExC,GAAKa,EAAcb,IAAiB,KAARA,EAC3B,MAAO,GAcR,IAXAG,EAASW,IAKiC,KAH1CV,EAAQJ,EAAIe,MAAOZ,IAGPC,EAAMO,OAAS,GAAIA,QAC9BP,EAAMY,MAGPX,EAAM,GAEAC,EAAI,EAAGA,EAAIF,EAAMO,OAAQL,IAAM,CAMpC,IAJCJ,EADID,EACKgB,EAAWb,EAAOE,GAAKL,GAEvBgB,EAAWb,EAAOE,eAELY,MACtB,OAAOhB,EAGRG,EAAIc,KAAMjB,EACV,CACD,OAAOG,CACR"}