{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar parseJSON = require( '@stdlib/utils-parse-json' );\nvar format = require( '@stdlib/string-format' );\nvar isWhitespace = require( '@stdlib/assert-is-whitespace' );\nvar reEOL = require( '@stdlib/regexp-eol' );\n\n\n// MAIN //\n\n/**\n* Parses a string as newline-delimited JSON (NDJSON).\n*\n* @param {string} str - input string\n* @param {Function} [reviver] - transformation function applied to each line\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} reviver must be a function\n* @returns {Array|Error} array of parsed values or an error\n*\n* @example\n* var out = parseNDJSON( '{\"name\":\"John\"}\\n{\"name\":\"Doe\"}' );\n* // returns [ { 'name': 'John' }, { 'name': 'Doe' } ]\n*/\nfunction parseNDJSON( str, reviver ) {\n\tvar parsed;\n\tvar RE_EOL;\n\tvar lines;\n\tvar out;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( arguments.length > 1 && !isFunction( reviver ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Reviver argument must be a function. Value: `%s`.', str ) );\n\t}\n\tif ( isWhitespace( str ) || str === '' ) {\n\t\treturn [];\n\t}\n\n\tRE_EOL = reEOL();\n\n\tlines = str.split( RE_EOL );\n\n\t// Remove trailing newline:\n\tif ( lines[ lines.length - 1 ].length === 0 ) {\n\t\tlines.pop();\n\t}\n\n\tout = [];\n\n\tfor ( i = 0; i < lines.length; i++ ) {\n\t\tif ( reviver ) {\n\t\t\tparsed = parseJSON( lines[ i ], reviver );\n\t\t} else {\n\t\t\tparsed = parseJSON( lines[ i ] );\n\t\t}\n\t\tif ( parsed instanceof Error ) {\n\t\t\treturn parsed;\n\t\t}\n\n\t\tout.push( parsed );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = parseNDJSON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Parse a string as newline-delimited JSON (NDJSON).\n*\n* @module @stdlib/utils-parse-ndjson\n*\n* @example\n* var parseNDJSON = require( '@stdlib/utils-parse-ndjson' );\n*\n* var out = parseNDJSON( '{\"beep\":\"boop\"}\\n{\"example\":42}' );\n* // returns [ { 'beep': 'boop' }, { 'example': 42 } ]\n*/\n\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAa,QAAS,4BAA6B,EACnDC,EAAY,QAAS,0BAA2B,EAChDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAe,QAAS,8BAA+B,EACvDC,EAAQ,QAAS,oBAAqB,EAkB1C,SAASC,EAAaC,EAAKC,EAAU,CACpC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAACb,EAAUO,CAAI,EACnB,MAAM,IAAI,UAAWJ,EAAQ,kEAAmEI,CAAI,CAAE,EAEvG,GAAK,UAAU,OAAS,GAAK,CAACN,EAAYO,CAAQ,EACjD,MAAM,IAAI,UAAWL,EAAQ,sEAAuEI,CAAI,CAAE,EAE3G,GAAKH,EAAcG,CAAI,GAAKA,IAAQ,GACnC,MAAO,CAAC,EAcT,IAXAG,EAASL,EAAM,EAEfM,EAAQJ,EAAI,MAAOG,CAAO,EAGrBC,EAAOA,EAAM,OAAS,CAAE,EAAE,SAAW,GACzCA,EAAM,IAAI,EAGXC,EAAM,CAAC,EAEDC,EAAI,EAAGA,EAAIF,EAAM,OAAQE,IAAM,CAMpC,GALKL,EACJC,EAASP,EAAWS,EAAOE,CAAE,EAAGL,CAAQ,EAExCC,EAASP,EAAWS,EAAOE,CAAE,CAAE,EAE3BJ,aAAkB,MACtB,OAAOA,EAGRG,EAAI,KAAMH,CAAO,CAClB,CACA,OAAOG,CACR,CAKAb,EAAO,QAAUO,ICxDjB,IAAIQ,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isString", "isFunction", "parseJSON", "format", "isWhitespace", "reEOL", "parseNDJSON", "str", "reviver", "parsed", "RE_EOL", "lines", "out", "i", "main"]
}
